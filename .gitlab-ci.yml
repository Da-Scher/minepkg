image: "golang:latest"

stages:
  - build
  - package
  - release

linux build:
  stage: build
  script:
    - go build -ldflags="-s -w" -o ./out/minepkg
  artifacts:
    paths:
      - out/minepkg

windows build:
  image: dockercore/golang-cross
  stage: build
  script:
    - echo "building for windows"
    - CC=x86_64-w64-mingw32-gcc-posix CXX=x86_64-w64-mingw32-g++-posix GOOS=windows GOARCH=amd64 CGO_ENABLED=1 go build -ldflags="-s -w" -o ./out/minepkg.exe
  artifacts:
    paths:
      - out/minepkg.exe

linux packages:
  stage: package
  image: "tenzer/fpm:no-entrypoint"
  only:
    - /^v\d+\.\d+\.\d+-?.*$/
  dependencies:
    - linux build
  variables:
    GIT_STRATEGY: none
  script:
    - mkdir -p ./source/usr/bin
    - cp out/minepkg ./source/usr/bin
    - fpm -s dir -C ./source -t deb -n minepkg -v $CI_COMMIT_REF_NAME .
    - fpm -s dir -C ./source -t rpm -n minepkg -v $CI_COMMIT_REF_NAME .
    - fpm -s dir -C ./source -t pacman -n minepkg -v $CI_COMMIT_REF_NAME .
  artifacts:
    paths:
      - '*.deb'
      - '*.rpm'
      - '*.pkg.tar.xz' # pacman

github release:
  stage: release
  only:
    - /^v\d+\.\d+\.\d+-?.*$/
  script:
    - go get github.com/aktau/github-release
    - github-release release \
      --user fiws \
      --repo minepkg \
      --tag $CI_COMMIT_REF_NAME
    - github-release upload \
      --user fiws \
      --repo minepkg \
      --tag $CI_COMMIT_REF_NAME \
      --name "minepkg-linux-amd64" \
      --file out/minepkg
    - github-release upload \
      --user fiws \
      --repo minepkg \
      --tag $CI_COMMIT_REF_NAME \
      --name "minepkg-windows-amd64" \
      --file out/minepkg.exe
