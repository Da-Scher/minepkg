package cmd

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/fiws/minepkg/cmd/launch"
	"github.com/fiws/minepkg/internals/instances"
	"github.com/fiws/minepkg/pkg/api"
	"github.com/spf13/cobra"
)

var (
	version    string
	serverMode bool
)

func init() {
	launchCmd.Flags().BoolVarP(&serverMode, "server", "s", false, "Start a server instead of a client")
	rootCmd.AddCommand(launchCmd)
}

var launchCmd = &cobra.Command{
	Use:   "launch [modpack]",
	Short: "Launch a local or remote modpack.",
	Long: `If a modpack name or URL is supplied, that modpack will be launched.
	Alternativly: Can be used in directories containing a minepkg.toml manifest to launch that modpack.
	`, // TODO
	Aliases: []string{"run", "start", "play"},
	Run: func(cmd *cobra.Command, args []string) {
		var instance *instances.Instance

		if len(args) == 0 {
			var err error
			instance, err = instances.DetectInstance()

			if err != nil {
				logger.Fail("Instance problem: " + err.Error())
			}
			instance.MinepkgAPI = apiClient
		} else {
			reqs := &api.RequirementQuery{
				Plattform: "fabric", // TODO: not static!
				Minecraft: "*",
				Version:   "latest", // TODO: get from id
			}
			release, err := apiClient.FindRelease(context.TODO(), args[0], reqs)
			if err != nil {
				logger.Fail(err.Error())
			}

			// TODO: check if exists
			// TODO: check error
			instanceDir := filepath.Join(instance.InstancesDir(), release.Package.Name+"@"+release.Package.Platform)
			os.MkdirAll(instanceDir, os.ModePerm)
			wd, err := os.Getwd()
			if err != nil {
				logger.Fail(err.Error())
			}
			// change dir to the instance
			os.Chdir(instanceDir)
			// back to current directory after minecraft stops
			defer os.Chdir(wd)

			instance = &instances.Instance{
				GlobalDir:     globalDir,
				ModsDirectory: filepath.Join(instanceDir, "mods"),
				Manifest:      release.Manifest,
				MinepkgAPI:    apiClient,
			}

			// TODO: only show when there actually is a update. ask user?
			logger.Headline("Updating instance")
			// maybe not update requirements every time
			if err := instance.UpdateLockfileRequirements(context.TODO()); err != nil {
				logger.Fail(err.Error())
			}
			if err := instance.UpdateLockfileDependencies(context.TODO()); err != nil {
				logger.Fail(err.Error())
			}

			instance.SaveManifest()
			instance.SaveLockfile()
		}

		switch {
		case instance.Manifest.Package.Type != "modpack":
			logger.Fail("Can only launch modpacks. You can use \"minepkg try\" if you want to test a mod.")
		case instance.Manifest.PlatformString() == "forge":
			logger.Fail("Can not launch forge modpacks for now. Sorry.")
		}

		// launch instance
		fmt.Printf("Launching %s\n", instance.Desc())
		creds, err := ensureMojangAuth()
		if err != nil {
			logger.Fail(err.Error())
		}
		instance.MojangCredentials = creds.Mojang

		cliLauncher := launch.CLILauncher{Instance: instance, ServerMode: serverMode}

		cliLauncher.Prepare()

		launchManifest := cliLauncher.LaunchManifest

		// TODO: This is just a hack
		if serverMode == true {
			launchManifest.MainClass = strings.Replace(launchManifest.MainClass, "Client", "Server", -1)

			// TODO: ASK USER!!! this is a publish blocker!
			eula := "# generated by minepkg\n# https://account.mojang.com/documents/minecraft_eula\neula=true\n"
			ioutil.WriteFile("./eula.txt", []byte(eula), os.ModePerm)

			// register server if this manifest is not local without a version
			// TODO: error handling
			if instance.Manifest.Package.Version != "" {
				id := instance.Manifest.Package.Name + "@" + instance.Manifest.Package.Version
				data, _ := json.Marshal(&MinepkgMapping{instance.Manifest.PlatformString(), id})

				fmt.Printf("%+v\n", string(data))
				req, _ := http.NewRequest("POST", "https://test-api.minepkg.io/v1/server-mappings", bytes.NewBuffer(data))
				apiClient.DecorateRequest(req)
				_, err := apiClient.HTTP.Do(req)
				if err != nil {
					logger.Fail(err.Error())
				}
				// TODO: fill in ip/host
				logger.Info("Registered server on minepkg.io. Join without setup using \"minepkg join <ip/host>\"")
			}
		}

		fmt.Println("\nLaunching Minecraft â€¦")
		opts := &instances.LaunchOptions{
			LaunchManifest: launchManifest,
			SkipDownload:   true,
			Server:         serverMode,
		}
		err = instance.Launch(opts)
		if err != nil {
			logger.Fail(err.Error())
		}
	},
}
